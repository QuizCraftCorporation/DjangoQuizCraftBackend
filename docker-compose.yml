version: "3.9"

services:
  celery:
    container_name: celery
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint:
      - ./scripts/celery-entrypoint.sh
    volumes:
      - .:/usr/src/app
    env_file:
      - config/.env.dev.rabbitmq
      - config/.env.dev.django
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - redis_password
      - postgres_password
    depends_on:
      - backend
      - rabbitmq
      - redis
    networks:
      - quiz

  search:
    container_name: search
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.search
    command: python3 server.py --address 0.0.0.0 --port 1234
    depends_on:
      - backend
    expose:
      - 1234
    networks:
      - quiz

  # Deploy the broker.
  rabbitmq:
    container_name: rabbitmq
    restart: unless-stopped
    image: rabbitmq:3.10-management-alpine
    expose:
      - 5672
    networks:
      - quiz

  backend:
    container_name: backend
    env_file:
      - config/.env.dev
      - config/.env.dev.django
      - config/.env.dev.rabbitmq
      - config/.env.dev.db
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - redis_password
      - postgres_password
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint:
      - ./scripts/server-entrypoint.sh
    command: gunicorn app.wsgi --bind :${DJANGO_PORT?} --reload --workers 1 --threads 4
    ports:
      - 127.0.0.1:${DJANGO_PORT?}:${DJANGO_PORT?}
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
    links:
      - db
    networks:
      - quiz

  db:
    container_name: db
    image: postgres:15.2-alpine
    restart: unless-stopped
    env_file:
      - config/.env.dev.db
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 5s
      timeout: 1s
      retries: 5
    expose:
      - 5432
    volumes:
      - postgres_db:/var/lib/postgresql
    networks:
      - quiz

  redis:
    container_name: redis
    image: redis:7-alpine
    restart: always
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    command: sh -c "redis-server --requirepass $$(cat $$REDIS_PASSWORD_FILE) && echo $$(cat $$REDIS_PASSWORD_FILE)"
    expose:
      - 6379
    volumes:
      - cache:/var/lib/redis/data
    networks:
      - quiz

networks:
  quiz:
    name: quiz
    driver: bridge

volumes:
  postgres_db:
    driver: local
  cache:
    driver: local

secrets:
  redis_password:
    file: ./secrets/redis-password.txt
  postgres_password:
    file: ./secrets/postgres-password.txt